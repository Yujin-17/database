# join하지 않는 경우
-- 이유진의 판매 물품 리스트 가져오기
select * from `seller` where `nickname` = '이유진'; -- id:1
select * from `used_goods` where `sellerId` = 1;

# join 
-- 이유진의 판매 물품 리스트 가져오기
select `seller`.*, `used_goods`.*
from `seller`
join `used_goods`
on `seller`.`id` = `used_goods`.`sellerId`
where `seller`.`nickname` = '이유진';

-- 테이블 별명 붙이기
select A.*, B.*
from `seller` as A 
join `used_goods` as B
on A.id = B.sellerId
where A.nickname = '이유진';

-- 김범수의 판매 물품 리스트 가져오기: 결과 0행
select A.*, B.*
from `seller` as A
join `used_goods` as B
on A.id = B.sellerId
where A.nickname = '김범수';

# inner join : 테이블의 교집합 
-- 이유진의 판매 물품 리스트 가져오기 
select A.*, B.*
from `seller` as A
inner join `used_goods` as B
on A.id = B.sellerId
where A.nickname = '이유진';

-- 김범수의 판매 물품 리스트 가져오기 : 결과 0행 -> seller에는 있으나 used_goods에는 없어서 0행
select A.*, B.*
from `seller` as A
inner join `used_goods` as B
on A.id = B.sellerId
where A.nickname = '김범수';

# left join(outer join): 좌측 테이블 전체 - 우측 테이블 NULL 허용 
-- 이유진의 판매 물품 리스트 가져오기: 결과 2행
select A.*, B.*
from `seller` as A
left join `used_goods` as B
on A.id = B.sellerId
where A.nickname = '이유진';

-- 김범수의 판매 물품 가져오기: 결과 1행 -> seller는 있으나 used_goods에 없어서 우측테이블이 NULL값 
select A.*, B.*
from `seller` as A
left join `used_goods` as B
on A.id = B.sellerId
where A.nickname = '김범수';


# right join(outer): 좌측 테이블 null 허용 - 우측테이블 전체
-- 김범수의 판매 물품 리스트 가져오기: 결과 1행 ->> seller에는 있으나 used_goods에 없어서 좌측 테이블이 null값
select A.*, B.*
from `used_goods` as A
right join `seller` as B
on A.sellerId = B.id
where B.nickname = '김범수';

-- 제목이 바퀴벌레로 시작하는 글을 올린 사람의 닉네임과 매너온도 확인하기
select A.nickname , A.temperature
from `seller` as A
left join `used_goods` as B	-- left join과 inner join이 차이 없는 조건이다. 
on A.id = B.sellerId
where B.title like '바퀴벌레%';


